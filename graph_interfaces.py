from __future__ import annotations
from typing import List, Protocol, TypeVar

# Interface definitions
# You should not modify these

T = TypeVar('T')
E = TypeVar('E')
V = TypeVar('V')

class IEdge[E, V](Protocol):
    def get_name(self) -> str: ...
    def set_name(self, name: str) -> None: ...
    def get_destination(self) -> IVertex: ...
    def get_weight(self) -> float: ...
    def set_weight(self, weight: float) -> None: ...

class IVertex[V,E](Protocol):
    def get_name(self) -> str: ...
    def set_name(self, name: str) -> None: ...
    def add_edge(self, edge: IEdge) -> None: ...
    def remove_edge(self, edge_name: str) -> None: ...
    def get_edges(self) -> List[IEdge]: ...
    def set_visited(self, visited: bool) -> None: ...
    def is_visited(self) -> bool: ...

class IGraph[V,E](Protocol):
    def get_vertices(self) -> List[IVertex]: ...
    def get_edges(self) -> List[IEdge]: ...
    def add_vertex(self, vertex: IVertex) -> None: ...
    def remove_vertex(self, vertex_name: str) -> None: ...
    def add_edge(self, edge: IEdge) -> None: ...
    def remove_edge(self, edge_name: str) -> None: ...
